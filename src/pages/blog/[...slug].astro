---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrev from "@components/BackToPrev.astro";
import LinkToFile from "@components/custom/LinkToFile.astro";
import CopyText from "@components/custom/CopyText.astro";

export async function getStaticPaths() {
    const posts = (await getCollection("blog"))
        .filter((post) => !post.data.draft)
        .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
    return posts.map((post) => ({
        params: { slug: post.slug },
        props: post,
    }));
}
type Props = CollectionEntry<"blog">;

const post = Astro.props;
const { Content } = await post.render();
---

<PageLayout title={post.data.title} description={post.data.description}>
    <Container>
        <div class="animate">
            <BackToPrev href="/blog"> Back to Posts </BackToPrev>
        </div>
        <div class="space-y-1 mt-10" lang="zh">
            <div class="animate flex flex-wrap items-center gap-x-1.5 gap-y-2">
                <div class="font-base text-sm flex items-center">
                    <FormattedDate date={post.data.date} />
                </div>

                <div class="flex items-center">
                    <span>&bull;</span>
                    <div class="font-base text-sm ml-1.5">
                        {post.data.author}
                    </div>
                </div>
                <div class="flex items-center">
                    <span>&bull;</span>
                    <div class="font-base text-sm ml-1.5">
                        {readingTime(post.body)}
                    </div>
                </div>

                {
                    (post.data.latex || post.data.pdf) && (
                        <div class="flex items-center">
                            <span>&bull;</span>
                            <div class="ml-1.5">
                                <LinkToFile
                                    slug={post.slug}
                                    latex={post.data.latex}
                                    pdf={post.data.pdf}
                                />
                            </div>
                        </div>
                    )
                }

                <div
                    class="hidden md:flex items-center opacity-0 transition-opacity duration-300 ease-in-out pointer-events-none"
                    id="copy-section"
                >
                    <span>&bull;</span>
                    <div class="ml-1.5 font-base text-sm">
                        Copy
                        <span class="inline-flex gap-x-1">
                            <CopyText
                                text={"æœ¬æ–‡å·²æ”¶å½•äºŽ c13n ([c13n.club](https://c13n.club))ã€‚\n\n" +
                                    post.body +
                                    "\n\nðŸ‘‡ç‚¹å‡» **é˜…è¯»åŽŸæ–‡** æŸ¥çœ‹ç½‘é¡µç‰ˆ"}
                                label={"Content"}
                            />
                            /
                            <CopyText
                                text={post.data.title + " | c13n"}
                                label={"Title"}
                            />
                            <!-- /
                            <CopyText
                                text={post.data.author}
                                label={"Author"}
                            /> -->
                            /
                            <CopyText
                                text={post.data.description}
                                label={"Desc"}
                            />
                        </span>
                    </div>
                </div>
            </div>
            <div
                class="animate text-3xl font-semibold text-black dark:text-white"
            >
                {post.data.title}
            </div>
        </div>
        <div class="animate text-sm font-base mt-3 mb-10">
            {post.data.description}
        </div>
        <article class="animate" lang="zh">
            <Content />
        </article>
    </Container>
</PageLayout>

<script>
    let cleanupCopyToggle: (() => void) | null = null;

    function initCopyToggle(): void {
        // Clean up previous event listeners if they exist
        if (cleanupCopyToggle) {
            cleanupCopyToggle();
        }

        const copySection = document.getElementById(
            "copy-section",
        ) as HTMLElement | null;
        if (!copySection) return;

        let isCommandPressed = false;

        function showCopySection(): void {
            if (!isCommandPressed && copySection) {
                isCommandPressed = true;
                copySection.classList.remove(
                    "opacity-0",
                    "pointer-events-none",
                );
                copySection.classList.add("opacity-100", "pointer-events-auto");
            }
        }

        function hideCopySection(): void {
            if (isCommandPressed && copySection) {
                isCommandPressed = false;
                copySection.classList.remove(
                    "opacity-100",
                    "pointer-events-auto",
                );
                copySection.classList.add("opacity-0", "pointer-events-none");
            }
        }

        function handleKeyDown(event: KeyboardEvent): void {
            if (event.metaKey || event.ctrlKey) {
                showCopySection();
            }
        }

        function handleKeyUp(event: KeyboardEvent): void {
            if (!event.metaKey && !event.ctrlKey) {
                hideCopySection();
            }
        }

        function handleWindowBlur(): void {
            hideCopySection();
        }

        function handleWindowFocus(): void {
            // Reset state when window regains focus
            hideCopySection();
        }

        function handleVisibilityChange(): void {
            if (document.hidden) {
                hideCopySection();
            }
        }

        // Event listeners
        document.addEventListener("keydown", handleKeyDown);
        document.addEventListener("keyup", handleKeyUp);
        window.addEventListener("blur", handleWindowBlur);
        window.addEventListener("focus", handleWindowFocus);
        document.addEventListener("visibilitychange", handleVisibilityChange);

        // Store cleanup
        cleanupCopyToggle = (): void => {
            document.removeEventListener("keydown", handleKeyDown);
            document.removeEventListener("keyup", handleKeyUp);
            window.removeEventListener("blur", handleWindowBlur);
            window.removeEventListener("focus", handleWindowFocus);
            document.removeEventListener(
                "visibilitychange",
                handleVisibilityChange,
            );
        };
    }

    // Initialize on page load
    document.addEventListener("DOMContentLoaded", initCopyToggle);
    // Re-initialize on Astro page transitions
    document.addEventListener("astro:after-swap", initCopyToggle);
</script>
